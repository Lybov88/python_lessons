#  *** Основы объектно-ориентированного программирования ***

# Объект принадлежит определенному классу (типу)
# Объекты обладают свойствами и методами

# Класс - это некий "чертеж" ("план") объектов.

# Объект опрделенного класса называется экземпляром класса.

#  Создание (опрделение) класса
# Название классов принято писать с заглавной буквы
class Laika:
    def __init__(self):
        # метод-конструктор
        # здесь создаются свойства (атрибут, поле)

        self.age = None

    def gav(self):
        # метод
        print(f"Гав-гав! Мой вес:{self.age}")


# Создание экземпляров (объектов) класса Laika
tuzic = Laika()

# присвоение значения свойству
tuzic.age = 5

# чтение значения из свойства
val = tuzic.age

# print(val)

# вызов метода
tuzic.gav()

sharic = Laika()
sharic.age = 10
sharic.gav()


#  *** Принцип Наследования ***
#  Классы могут наследовать свойства и методы у других классов

# создание родительского (предкового) класса
class Cat:
    def __init__(self, n_legs):
        self.num_legs = n_legs

    def move(self):
        print(f"I move. Num legs: {self.num_legs}")

#  Создание дочерних классов


class Cat_1(Cat):
    pass


class Cat_2(Cat):
    def info(self):
        print("I am Cat_2")


murka = Cat_1(4)
murka.move()

juchka = Cat_2(5)
juchka.move()
juchka.info()

# самостоятнльно:
# - полиморфизм
# - инкапсуляция
# - композиция
